@page "/orderitems/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorOnlineShop.Models
@inject IDbContextFactory<BlazorOnlineShop.Data.BlazorOnlineShopContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>OrderItem</h2>
    <hr />
    @if (orderitem is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">OrderID</dt>
            <dd class="col-sm-10">@orderitem.OrderID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ProductID</dt>
            <dd class="col-sm-10">@orderitem.ProductID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Quantity</dt>
            <dd class="col-sm-10">@orderitem.Quantity</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ProductPrice</dt>
            <dd class="col-sm-10">@orderitem.ProductPrice</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">OrderedDate</dt>
            <dd class="col-sm-10">@orderitem.OrderedDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastUpdatedDate</dt>
            <dd class="col-sm-10">@orderitem.LastUpdatedDate</dd>
        </dl>
        <EditForm method="post" Model="orderitem" OnValidSubmit="DeleteOrderItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(orderitem is null)">Delete</button> |
            <a href="/orderitems">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private OrderItem? orderitem;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        orderitem = await context.OrderItem.FirstOrDefaultAsync(m => m.ID == ID);

        if (orderitem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteOrderItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.OrderItem.Remove(orderitem!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/orderitems");
    }
}

@page "/products/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorOnlineShop.Models
@inject IDbContextFactory<BlazorOnlineShop.Data.BlazorOnlineShopContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Product</h2>
    <hr />
    @if (product is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@product.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AddedDate</dt>
            <dd class="col-sm-10">@product.AddedDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">lastUpdatedDate</dt>
            <dd class="col-sm-10">@product.lastUpdatedDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">lastUpdatedBy</dt>
            <dd class="col-sm-10">@product.lastUpdatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CategoryID</dt>
            <dd class="col-sm-10">@product.CategoryID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SellingPrice</dt>
            <dd class="col-sm-10">@product.SellingPrice</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Cost</dt>
            <dd class="col-sm-10">@product.Cost</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@product.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">viewedCount</dt>
            <dd class="col-sm-10">@product.viewedCount</dd>
        </dl>
        <EditForm method="post" Model="product" OnValidSubmit="DeleteProduct" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(product is null)">Delete</button> |
            <a href="/products">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Product? product;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.ID == ID);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Product.Remove(product!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/products");
    }
}

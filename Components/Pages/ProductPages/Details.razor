@page "/products/details"
@using Microsoft.EntityFrameworkCore
@using BlazorOnlineShop.Models
@inject IDbContextFactory<BlazorOnlineShop.Data.BlazorOnlineShopContext> DbFactory
@inject NavigationManager NavigationManager

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="css/product_detail.css" rel="stylesheet" />
</head>

<PageTitle>Details</PageTitle>

<div>
    @if (product is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <h1 class="d-flex align-items-center">
            @product.Name
            <div class="d-flex align-items-center ms-auto">
                <i class="bi bi-fire text-danger me-2"></i>
                <span class="viewed-count">@product.viewedCount views</span>
            </div>
        </h1>
        <hr />
        <div class="product-container">
            <!-- Left column for the image -->

                @if (!string.IsNullOrEmpty(product.imgUrl))
                {
                    <img src="@product.imgUrl" alt="Product Image" class="product-image" />
                }
                else
                {
                    <span>No image available</span>
                }


            <!-- Right column for product details -->
            <div class="col-md-8 product-details">
                <div class="product-basic-info">
                    <dl class="row">
                    <dt class="col-sm-3 productDetail-title">Price</dt>
                    <dd class="col-sm-9 productDetail-content">@($"£{product.SellingPrice:0.00}")</dd>
                    </dl>

                    <dl class="row">
                    <dt class="col-sm-3 productDetail-title">Description</dt>
                    <dd class="col-sm-9 productDetail-content">@product.Description</dd>
                    </dl>

                
                </div>

                <div class="product-dates">
                        Added: @product.AddedDate<br>
                        Last updated: @product.lastUpdatedDate
                </div>


            </div>
        </div>
    }
</div>

<div>
    <a href="@($"/products/GridView")">Back to List</a>
</div>

@code {
    private Product? product;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.ID == ID);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        // Increment the viewedCount and save changes
        product.viewedCount++;
        await context.SaveChangesAsync();

    }
}

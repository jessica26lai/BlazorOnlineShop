@page "/products/details"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using BlazorOnlineShop.Models
@inject IDbContextFactory<BlazorOnlineShop.Data.BlazorOnlineShopContext> DbFactory
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IJSRuntime JsRuntime

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="css/product_detail.css" rel="stylesheet" />
    <link href="bootstrap/bootstrap.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        function showToast() {
            var toastElement = document.getElementById('cart-toast');
            var toast = new bootstrap.Toast(toastElement);
            toast.show();

            // Hide the toast after 1 seconds
            setTimeout(() => {
                toast.hide();
            }, 3000);

        }
    </script>
</head>

<PageTitle>Details</PageTitle>

<div>
    @if (product is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <h1 class="d-flex align-items-center">
            @product.Name
            <div class="d-flex align-items-center ms-auto">
                <i class="bi bi-fire text-danger me-2"></i>
                <span class="viewed-count">@product.viewedCount views</span>
            </div>
        </h1>
        <hr />
        <div class="product-container">
            <!-- Left column for the image -->

                @if (!string.IsNullOrEmpty(product.imgUrl))
                {
                    <img src="@product.imgUrl" alt="Product Image" class="product-image" />
                }
                else
                {
                    <span>No image available</span>
                }


            <!-- Right column for product details -->
            <div class="col-md-8 product-details">
                <div class="product-basic-info">
                    <dl class="row">
                    <dt class="col-sm-2 productDetail-title">Price</dt>
                    <dd class="col-sm-9 productDetail-content">@($"£{product.SellingPrice:0.00}")</dd>
                    </dl>

                    <dl class="row">
                    <dt class="col-sm-2 productDetail-title">Description</dt>
                    <dd class="col-sm-9 productDetail-content">@product.Description</dd>
                    </dl>

                
                </div>

                <div class="add-to-cart">
                    <dl class="row">
                        <dt class="col-sm-2 productDetail-title"><label for="quantity">Quantity</label></dt>
                        <dd class="col-sm-9 productDetail-content"><input type="number" id="quantity" class="form-control d-inline-block" @bind="quantity" min="1" />
                            @if (!string.IsNullOrEmpty(AddToCartError))
                            {
                                <br>

                                <span class="text-danger">@AddToCartError</span>

                            }
                        </dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2 productDetail-title"></dt>
                        <dd class="col-sm-9 productDetail-content">
                            <button class="btn btn-primary mt-2" @onclick="AddToCart">
                                <i class="bi bi-cart-plus"></i> Add to Cart
                            </button>
                        </dd>
                    </dl>
                    

                    <div class="toast-container toast-AddToCart">
                        <div class="toast align-items-center text-bg-success border-0" id="cart-toast" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="d-flex">
                                <div class="toast-body">
                                    Product added to cart successfully!
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="product-dates">
                        Added: @product.AddedDate<br>
                        Last updated: @product.lastUpdatedDate
                </div>
            </div>
        </div>
    }
</div>

<div>
    <a href="@($"/products/GridView")">Back to Product List</a>
</div>


@code {
    private Product? product;
    private int quantity = 1;
    private int result_int = 0;
    private string AddToCartError { get; set; }

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.ID == ID);

        var result = await ProtectedLocalStore.GetAsync<List<CartItem>>("cart");

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        product.viewedCount++;
        await context.SaveChangesAsync();

    }

    private async Task AddToCart()
    {
        if (quantity>0){
            AddToCartError = "";
            // Retrieve existing cart from session
            var result = await ProtectedLocalStore.GetAsync<List<CartItem>>("cart");
            List<CartItem> cart = result.Value;

            if (cart == null) {
                cart = new List<CartItem>();
            }

            // Check if the item is already in the cart
            var existingItem = cart.FirstOrDefault(ci => ci.ProductID == ID);
            if (existingItem != null)
            {
                existingItem.Quantity += quantity;
            }
            else
            {
                // Add new item to the cart
                cart.Add(new CartItem { ProductID = ID, ProductName = product.Name, Quantity = quantity, ProductPrice = product.SellingPrice });
            }

            // Save the updated cart back to session storage
            await ProtectedLocalStore.SetAsync("cart", cart);

            // await JsRuntime.InvokeVoidAsync("alert", "Product added to cart.");
            await JsRuntime.InvokeVoidAsync("showToast");
        }
        else
        {
            AddToCartError = "Quantity should be larger than 1";
        }
    }


}



@page "/orders/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorOnlineShop.Models
@inject IDbContextFactory<BlazorOnlineShop.Data.BlazorOnlineShopContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Order</h2>
    <hr />
    @if (order is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ClientName</dt>
            <dd class="col-sm-10">@order.ClientName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ClientEmail</dt>
            <dd class="col-sm-10">@order.ClientEmail</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ClientAddress</dt>
            <dd class="col-sm-10">@order.ClientAddress</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">OrderedDate</dt>
            <dd class="col-sm-10">@order.OrderedDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastUpdatedDate</dt>
            <dd class="col-sm-10">@order.LastUpdatedDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastUpdatedBy</dt>
            <dd class="col-sm-10">@order.LastUpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="order" OnValidSubmit="DeleteOrder" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(order is null)">Delete</button> |
            <a href="/orders">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Order? order;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        order = await context.Order.FirstOrDefaultAsync(m => m.ID == ID);

        if (order is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteOrder()
    {
        using var context = DbFactory.CreateDbContext();

        // Delete all order items associated with this order
        var orderItems = await context.OrderItem
            .Where(item => item.OrderID == order.ID)
            .ToListAsync();

        context.OrderItem.RemoveRange(orderItems); // Remove all associated order items

        context.Order.Remove(order!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders");
    }
}
